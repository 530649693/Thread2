/**
 * 以下是关系到线程运行状态的几个方法：
 * 
 * 　　1）start方法 　　start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程
 * 来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源。
 * 
 * 　　2）run方法 　　run()方法是不需要用户来调用的，当通过start方法启动一个线程之后，
 * 当线程获得了CPU执行时间，便进入run方法体去执行具体的任务。注意， 继承Thread类必须重写run方法，在run方法中定义具体要执行的任务。
 * 
 * 　　3）sleep方法
 * 
 * @author Administrator
 * 
 */
// sleep 方法 注意，如果调用了sleep方法，必须捕获InterruptedException异常或者将该异常
//向上层抛出。当线程睡眠时间满后，不一定会立即得到执行，因为此时可能CPU正在执行其他的任务。
//所以说调用sleep方法相当于让线程进入阻塞状态。
//sleep 要等待执行完毕后才能释放锁
public class Test1 {
	private int i = 0;
	private Object object = new Object();

	public static void main(String[] args) {
		Test1 test = new Test1();
		MyThread thread1 = test.new MyThread();
		MyThread thread2 = test.new MyThread();
		thread1.start();
		thread2.start();
	}

	class MyThread extends Thread {
		public void run() {
			synchronized (object) {
				i++;
				System.out.println("i : " + i);
				try {
					System.out.println("线程" + Thread.currentThread().getName()
							+ "进入睡眠状态");
					Thread.currentThread().sleep(800);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println("线程" + Thread.currentThread().getName()
						+ "睡眠结束");
				i++;
				System.out.println("i : " + i);
			}
		}
	}
}
